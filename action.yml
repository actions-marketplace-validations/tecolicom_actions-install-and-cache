name: install-and-cache generic backend
description: 'GitHub Action to run installer and cache result'
author: 'Office TECOLI, LLC'
branding: 
  color: 'orange'
  icon: 'type'

inputs:
  target:    { required: true,  type: string }
  command:   { required: true,  type: string }
  directory: { required: true,  type: string }
  cache:     { required: false, type: string, default: yes }
  key:       { required: false, type: string }
  sudo:      { required: false, type: boolean }
  verbose:   { required: false, type: boolean, default: false }

outputs:
  cache-hit:
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: composite
  steps:

    - id: setup
      shell: bash
      run: |
        : setup install-and-cache
        target="${{ inputs.target }}"
        command="${{ inputs.command }}"
        directory="${{ inputs.directory }}"
        given_key="${{ inputs.key }}"
        archive= key=
        case "${{ inputs.cache }}" in
            yes|workflow)
                cache="${{ inputs.cache }}"
                uname -mrsv
                hash=$( (uname -mrsv ; echo $command $target $directory) | (md5sum||md5) | awk '{print $1}' )
                key="${hash}${given_key:+-$given_key}"
                [ "$cache" == 'workflow' ] && key="$key-${{ github.run_id }}-${{ github.run_attempt }}"
                archive=$HOME/archive-$hash.tz
                ;;
            *)
                cache=no
                ;;
        esac
        cat << END
        ::set-output name=cache::$cache
        ::set-output name=archive::$archive
        ::set-output name=key::$key
        ::set-output name=epoch::/tmp/epoch-$$
        END

    - id: cache
      if: steps.setup.outputs.cache != 'no'
      uses: actions/cache@v2
      with:
        path: ${{ steps.setup.outputs.archive }}
        key:  ${{ steps.setup.outputs.key }}

    - id: extract
      if: steps.setup.outputs.cache != 'no' && steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        : extract
        archive="${{ steps.setup.outputs.archive }}"
        verbose="${{ inputs.verbose }}"
        [ "${{ inputs.sudo }}" = true ] && sudo=sudo
        ls -l $archive
        if [ -s $archive ]
        then
            if [ "$verbose" = true ]
            then
                tar -tvzf $archive
            fi
            $sudo tar -C / -xvzf $archive
        else
            echo "$archive is empty"
        fi

    - id: install-and-archive
      if: steps.cache.outputs.cache-hit != 'true'
      uses: tecoli-com/actions-install-and-archive@v0
      with:
        target:    ${{ inputs.target }}
        command:   ${{ inputs.command }}
        archive:   ${{ steps.setup.outputs.archive }}
        directory: ${{ inputs.directory }}
        sudo:      ${{ inputs.sudo }}
